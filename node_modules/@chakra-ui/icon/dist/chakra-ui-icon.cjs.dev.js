'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var system = require('@chakra-ui/system');
var utils = require('@chakra-ui/utils');
var React = require('react');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

const fallbackIcon = {
  path: /*#__PURE__*/React__namespace.createElement("g", {
    stroke: "currentColor",
    strokeWidth: "1.5"
  }, /*#__PURE__*/React__namespace.createElement("path", {
    strokeLinecap: "round",
    fill: "none",
    d: "M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25"
  }), /*#__PURE__*/React__namespace.createElement("path", {
    fill: "currentColor",
    strokeLinecap: "round",
    d: "M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0"
  }), /*#__PURE__*/React__namespace.createElement("circle", {
    fill: "none",
    strokeMiterlimit: "10",
    cx: "12",
    cy: "12",
    r: "11.25"
  })),
  viewBox: "0 0 24 24"
};
const Icon = /*#__PURE__*/system.forwardRef((props, ref) => {
  const {
    as: element,
    viewBox,
    color = "currentColor",
    focusable = false,
    children,
    className,
    __css,
    ...rest
  } = props;

  const _className = utils.cx("chakra-icon", className);

  const styles = {
    w: "1em",
    h: "1em",
    display: "inline-block",
    lineHeight: "1em",
    flexShrink: 0,
    color,
    ...__css
  };
  const shared = {
    ref,
    focusable,
    className: _className,
    __css: styles
  };

  const _viewBox = viewBox ?? fallbackIcon.viewBox;
  /**
   * If you're using an icon library like `react-icons`.
   * Note: anyone passing the `as` prop, should manage the `viewBox` from the external component
   */


  if (element && typeof element !== "string") {
    return /*#__PURE__*/React__namespace.createElement(system.chakra.svg, _extends({
      as: element
    }, shared, rest));
  }

  const _path = children ?? fallbackIcon.path;

  return /*#__PURE__*/React__namespace.createElement(system.chakra.svg, _extends({
    verticalAlign: "middle",
    viewBox: _viewBox
  }, shared, rest), _path);
});

if (utils.__DEV__) {
  Icon.displayName = "Icon";
}

var Icon$1 = Icon;

function createIcon(options) {
  const {
    viewBox = "0 0 24 24",
    d: pathDefinition,
    path,
    displayName,
    defaultProps = {}
  } = options;
  const Comp = /*#__PURE__*/system.forwardRef((props, ref) => /*#__PURE__*/React__namespace.createElement(Icon, _extends({
    ref: ref,
    viewBox: viewBox
  }, defaultProps, props), path ?? /*#__PURE__*/React__namespace.createElement("path", {
    fill: "currentColor",
    d: pathDefinition
  })));

  if (utils.__DEV__) {
    Comp.displayName = displayName;
  }

  return Comp;
}

exports.Icon = Icon;
exports.createIcon = createIcon;
exports["default"] = Icon$1;
